---
- name: wait for Jenkins to start up before proceeding.
  shell: "curl --write-out '%{http_code}' --silent --output /dev/null http://{{ jenkins_hostname }}:{{ jenkins_port }}/login"
  register: result
  until: (result.stdout.find("403") != -1) or (result.stdout.find("200") != -1) and (result.stdout.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: "False"
  tags:
    - full-deploy

- name: get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_port }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10
  tags:
    - full-deploy



#- name: Update Jenkins plugin data.
#  shell: >
#    curl -L https://updates.jenkins-ci.org/update-center.json | tac | tac | sed '1d;$d' > /var/lib/jenkins/updates/default.json
#    creates: /var/lib/jenkins/updates/default.json
#  tags:
#    - jenkins
#    - jenkins-plugin-update
#    - jenkins-default
#
#
#- name: Permissions for default.json updates info.
#  file:
#    path: /var/lib/jenkins/updates/default.json
#    owner: jenkins
#    group: jenkins
#    mode: 0755
#  tags:
#    - permissions
#    - jenkins-permissions
#    - jenkins-plugin-update
#    - jenkins-default

- name: Install Jenkins plugins.
  vars:
    jenkins_plugins: "{{ lookup('file', 'roles/jenkins-docker/templates/plugins.txt') }}"
  get_url:
    dest: "{{ jenkins_data_dir }}/plugins/{{ item | mandatory }}.jpi"
    url: "https://updates.jenkins-ci.org/latest/{{ item }}.hpi"
    owner: "{{ user }}"
    group: "{{ group }}"
    mode: 0644
    validate_certs: no
  register: result
#  changed_when:
#    - '"changed:" in result.stdout'
  loop: "{{ lookup('file', 'roles/jenkins-docker/templates/plugins.txt').splitlines() }}"
  notify: restart docker-compose-jenkins
  tags:
    - jenkins
    - jenkins-setup-plugins
